<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="https://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<_locDefinition xmlns="urn:locstudio">
		<_locDefault _loc="locNone" />
		<_locTag _loc="locData">Title</_locTag>
		<_locTag _loc="locData">Description</_locTag>
		<_locTag _loc="locData">Author</_locTag>
		<_locTag _loc="locData">ToolTip</_locTag>
		<_locTag _loc="locData">Default</_locTag>
	</_locDefinition>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Index analyze</Title>
			<Shortcut>ixan</Shortcut>
			<Description>List index usage</Description>
			<Author>Micael Uthas (uthas.com)</Author>
			<SnippetTypes>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
			</Declarations>
			<Code Language="SQL">
				<![CDATA[
/*
All zero values mean that the table is not used, or the SQL Server service restarted recently.
An index with zero or small number of seeks, scans or lookups and large number of updates is a useless index and should be removed, after verifying with the system owner, as the main purpose of adding the index is speeding up the read operations.
An index that is scanned heavily with zero or small number of seeks means that the index is badly used and should be replaced with more optimal one.
An index with large number of Lookups means that we need to optimize the index by adding the frequently looked up columns to the existing index non-key columns using the INCLUDE clause.
A table with a very large number of Scans indicates that SELECT * queries are heavily used, retrieving more columns than what is required, or the index statistics should be updated.
A Clustered index with large number of Scans means that a new Non-clustered index should be created to cover a non-covered query.
Dates with NULL values mean that this action has not occurred yet.
Large scans are OK in small tables.

*/
Declare
@TableName sysname = 'Item' --Enter a specific tabel to investigate
, @TableAlias Varchar(255) = NULL--Enter a table alias for the columns
, @IndexName sysname = NULL --Enter a specific index to investigate
, @IndexUsageDropThreshold Int = 100 --Enter a value (Sum of SEEK, SCAN, LOOCKUP) for when a DROP INDEX statement shuold be created

IF @TableAlias  = '' SET @TableAlias = NULL

DROP TABLE IF EXISTS #IxInfo
CREATE TABLE #IxInfo
(
	TABLE_NAME SYSNAME
	, INDEX_NAME SYSNAME
	, INDEX_TYPE SYSNAME
	, INDEX_SIZE INT
	, Page_Count INT
	, LastSeek DATETIME
	, LastScan DATETIME
	, LastLookup DATETIME
	, LastUpdate DATETIME
	, NumOfSeeks INT NULL DEFAULT(0)
	, NumOfScans INT NULL DEFAULT(0)
	, NumOfLookups INT NULL DEFAULT(0)
	, NumOfInserts INT NULL DEFAULT(0)
	, NumOfUpdates INT NULL DEFAULT(0)
	, NumOfDeletes INT NULL DEFAULT(0)
	, KeyCols NVARCHAR(MAX)
	, IncludeCols NVARCHAR(MAX)
	, TableId INT
	, Index_Id INT
	, SumQuery AS(NumOfSeeks + NumOfScans + NumOfLookups)
	, SumIUD AS(NumOfInserts + NumOfUpdates + NumOfDeletes)

)

INSERT INTO #IxInfo
(
	TABLE_NAME
	, INDEX_NAME
	, INDEX_TYPE
	, TableId
	, Index_Id
)
SELECT
	OBJECT_NAME(ix.Object_Id)
	, ix.[name]
	, ix.[type]
	, ix.object_id
	, ix.index_id
FROM
	sys.indexes ix
WHERE
	OBJECTPROPERTY(IX.OBJECT_ID,'IsUserTable') = 1
	AND ix.index_id > 1
	AND (@TableName IS NULL OR OBJECT_NAME(IX.OBJECT_ID) = @TableName)
	AND (@IndexName IS NULL OR IX.name = @IndexName)

UPDATE
	#IxInfo
SET
	LastSeek = x.LastSeek
	, LastScan = x.LastScan
	, LastLookup = x.LastLookup
	, LastUpdate = x.LastUpdate
	, NumOfSeeks = x.NumOfSeeks
	, NumOfScans = x.NumOfScans
	, NumOfLookups = x.NumOfLookups
FROM
	#IxInfo ix
INNER JOIN
(
	SELECT
		IXUS.last_user_seek AS LastSeek
		, IXUS.last_user_scan AS LastScan
		, IXUS.last_user_lookup AS LastLookup
		, IXUS.last_user_update AS LastUpdate
		, IXUS.user_seeks AS NumOfSeeks
		, IXUS.user_scans AS NumOfScans
		, IXUS.user_lookups AS NumOfLookups
		, ix.index_id
	FROM
		sys.indexes IX
	INNER JOIN sys.dm_db_index_usage_stats IXUS
		ON IXUS.index_id = IX.index_id 
		AND IXUS.OBJECT_ID = IX.OBJECT_ID
	INNER JOIN sys.dm_db_partition_stats PS
		ON PS.object_id=IX.object_id
	INNER JOIN sys.objects O
		ON O.object_id = IX.object_id
	WHERE
		OBJECTPROPERTY(IX.OBJECT_ID,'IsUserTable') = 1
		AND (@TableName IS NULL OR OBJECT_NAME(IX.OBJECT_ID) = @TableName)
		AND (@IndexName IS NULL OR IX.name = @IndexName)
		AND IX.is_primary_key = 0
) x
	ON x.index_id = ix.index_id

UPDATE
	#IxInfo
SET
	NumOfInserts = x.NumOfInserts
	, NumOfUpdates = x.NumOfupdates
	, NumOfDeletes = x.NumOfDeletes
FROM
	#IxInfo ix
CROSS APPLY(
	SELECT
		IXOS.object_id
		, IXOS.index_id
		, IXOS.LEAF_INSERT_COUNT NumOfInserts
		, IXOS.LEAF_UPDATE_COUNT NumOfupdates
		, IXOS.LEAF_DELETE_COUNT NumOfDeletes	   
	FROM
		SYS.DM_DB_INDEX_OPERATIONAL_STATS (NULL,NULL,NULL,NULL ) IXOS 
	WHERE
		IXOS.object_id = ix.TableId
		AND IXOS.index_id = ix.Index_Id
) x

UPDATE
	#IxInfo
SET
	INDEX_SIZE = x.IndexSizeKB
	, Page_Count = x.page_count
FROM
	#IxInfo ix
CROSS APPLY(
	SELECT
		PS.object_id
		, PS.index_id
		, SUM(PS.[used_page_count]) * 8 IndexSizeKB
		, SUM(PS.[used_page_count]) As page_count
	FROM
		sys.dm_db_partition_stats PS 
	WHERE
		PS.object_id = ix.TableId
		AND PS.index_id = ix.Index_Id
	GROUP BY
		PS.object_id
		, PS.index_id
) x

UPDATE
	#IxInfo
SET KeyCols = kc.Cols
FROM
	#IxInfo ix
INNER JOIN
(
	SELECT 
		o.object_id AS ObjectId
		, ix.index_id AS IndexId
		, STRING_AGG((ISNULL(@TableAlias + '.' + Quotename(ck.Name),  Quotename(ck.Name)) + IIF(ic.is_descending_key = 1, ' DESC', '')) , ', ') AS Cols 
	FROM 
		sys.index_columns ic
		INNER JOIN sys.indexes ix
			ON ix.object_id = ic.object_id 
			AND ix.index_id = ic.index_id
		INNER JOIN sys.columns ck 
			ON ck.object_id = ic.object_id
			AND ck.column_id = ic.column_id
			AND ic.is_included_column = 0
		INNER JOIN sys.objects o
			ON o.object_id = ic.object_id
	WHERE
		(@TableName IS NULL OR OBJECT_NAME(ic.object_id) = @TableName)
	GROUP BY
		o.object_id
		, ix.index_id
) kc
	ON kc.ObjectId = ix.TableId
	AND kc.IndexId = ix.Index_Id

UPDATE
	#IxInfo
SET IncludeCols = Ic.Cols
FROM
	#IxInfo ix
INNER JOIN
(
	SELECT 
		o.object_id AS ObjectId
		, ix.index_id AS IndexId
		, STRING_AGG((ISNULL(@TableAlias + '.' + Quotename(ck.Name),  Quotename(ck.Name)) + IIF(ic.is_descending_key = 1, ' DESC', '')) , ', ') AS Cols 
	FROM 
		sys.index_columns ic
		INNER JOIN sys.indexes ix
			ON ix.object_id = ic.object_id 
			AND ix.index_id = ic.index_id
		INNER JOIN sys.columns ck
			ON ck.object_id = ic.object_id
			AND ck.column_id = ic.column_id
			AND ic.is_included_column = 1
		INNER JOIN sys.objects o
			ON o.object_id = ic.object_id
	WHERE 
		(@TableName IS NULL OR OBJECT_NAME(ic.object_id) = @TableName)
	GROUP BY
		o.object_id
		, ix.index_id
) Ic
	ON Ic.ObjectId = ix.TableId
	AND Ic.IndexId = ix.Index_Id

Select
	inf.Table_Name
	, inf.Index_Name
	, inf.Index_Type
	, inf.INDEX_SIZE As index_SizeKB
	, inf.Page_Count
	, inf.LastSeek
	, inf.LastScan
	, inf.LastLookup
	, inf.LastUpdate

	, inf.NumOfSeeks
	, inf.NumOfScans
	, inf.NumOfLookups

	, inf.NumOfInserts
	, inf.NumOfupdates
	, inf.NumOfDeletes
	, KeyCols
	, IncludeCols
	, SumQuery
	, SumIUD
	, IIF(SumQuery <= @IndexUsageDropThreshold, 'DROP INDEX IF EXISTS ' + QUOTENAME(inf.Table_Name) + '.' + QUOTENAME(inf.Index_Name), '') As DropIndex
from
	#IxInfo inf
ORDER BY
	SumQuery ASC
]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
